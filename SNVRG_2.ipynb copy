{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "il_2CS_y5Tbi"
   },
   "source": [
    "# Stochastic Nested Variance Reduction Gradient for Non-convex Optimization\n",
    "\n",
    "This notebook implements the SNVRG algorithm proposed in this [paper](https://papers.nips.cc/paper/7648-stochastic-nested-variance-reduced-gradient-descent-for-nonconvex-optimization.pdf) by Dongruo Zhou et al.\n",
    "\n",
    "We apply the SNVRG algorithm to a convex problem (Logistic regression with LASSO regularization) and a non-convex problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "wLF1L6cu5Tbj"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "VbiZ2Ins5Tbn"
   },
   "source": [
    "## 1. Toy Convex Problem: Logistic Regression with LASSO regularization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "m32gebkO5Tbo"
   },
   "outputs": [],
   "source": [
    "# Generate the data\n",
    "n, p = 1000, 5\n",
    "\n",
    "X = np.random.randn(n, p)\n",
    "w = np.random.randn(p)\n",
    "\n",
    "sigma = 1\n",
    "xi = np.random.randn(n)\n",
    "\n",
    "y = np.sign(X.dot(w) + sigma*xi)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "06i4ngS75Tbq"
   },
   "outputs": [],
   "source": [
    "# Define the loss function\n",
    "def LASSO_loss(X, y, theta, lamda):\n",
    "    '''Return the logistic LASSO loss for parameters `theta`.'''\n",
    "    return np.mean(np.log(1.0 + np.exp(- y * X.dot(theta)))) + lamda * np.sum(np.abs(theta))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "XA5ODmzb5Tbt"
   },
   "outputs": [],
   "source": [
    "# Define the gradient of the loss function\n",
    "def full_grad_loss(X, y, theta, lamda):\n",
    "    '''Return the gardient of the logistic LASSO loss at point `theta`.'''\n",
    "    n = X.shape[0]\n",
    "    LASSO_grad = lamda * ((theta >= 0).astype(np.int) * 2 - 1)\n",
    "    return (1./n) * (- y/(1.0 + np.exp(y * X.dot(theta)))).dot(X) + LASSO_grad\n",
    "\n",
    "def grad(X, y, theta, lamda, i):\n",
    "    '''Return the gardient of the logistic LASSO loss at point `theta` for datum i.'''\n",
    "    n = X.shape[0]\n",
    "    LASSO_grad = lamda * ((theta >= 0).astype(np.int) * 2 - 1)\n",
    "    return (1./n) * (- y[i]/(1.0 + np.exp(y[i] * X[i].dot(theta)))) * X[i] + LASSO_grad"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "QK6-CRXs5Tbv"
   },
   "outputs": [],
   "source": [
    "# Define the SVRG algorithm\n",
    "def SVRG(X, y, theta, lamda, max_iter, max_iter_inner, step_size):\n",
    "    n, p = X.shape\n",
    "    theta_hat_history = []\n",
    "    loss_history = []\n",
    "    theta_history = np.zeros((max_iter_inner, p))\n",
    "    \n",
    "    theta_hat = theta\n",
    "    \n",
    "    for t in range(max_iter):\n",
    "        full_gradient = full_grad_loss(X, y, theta_hat, lamda)\n",
    "        for k in range(max_iter_inner):\n",
    "            i = np.random.randint(0, n)\n",
    "            theta = theta - step_size * (grad(X, y, theta, lamda, i) - grad(X, y, theta_hat, lamda, i) + full_gradient)\n",
    "            theta_history[k] = theta\n",
    "            \n",
    "        theta_hat = np.mean(theta_history, axis=0)\n",
    "        \n",
    "        theta_hat_history.append(theta_hat)\n",
    "        loss_history.append(LASSO_loss(X, y, theta_hat, lamda))\n",
    "    \n",
    "    return theta_hat, theta_hat_history, loss_history"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "qSYlkiXH5Tbx"
   },
   "outputs": [],
   "source": [
    "theta = np.random.randn(p)\n",
    "svrg_theta_hat, svrg_theta_hat_history, svrg_loss_history = SVRG(X, y, theta, lamda=0.1, max_iter=100, max_iter_inner=100, step_size=0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Js1NM0C45Tb0"
   },
   "outputs": [],
   "source": [
    "# Define the approximative minimum value of the loss function\n",
    "svrg_min_loss = np.min(svrg_loss_history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "tUJ4REx45Tb2"
   },
   "outputs": [],
   "source": [
    "# Define the function to find the mod index\n",
    "def find_index(t, loop_params):\n",
    "    K = len(loop_params)\n",
    "    T = 1.0\n",
    "    for j in range(K, 0, -1):\n",
    "        T1 = T * loop_params[j-1]\n",
    "        if t % T == 0 and t % T1 != 0:\n",
    "            return j\n",
    "        T = T1\n",
    "    return 0\n",
    "\n",
    "def update_reference_points(theta_reference, theta, r):\n",
    "    updated_reference = theta_reference.copy()\n",
    "    K, p = theta_reference.shape\n",
    "    to_update = np.broadcast_to(theta, shape=(K - r, p))\n",
    "    updated_reference[r:] = to_update\n",
    "    \n",
    "    return updated_reference\n",
    "\n",
    "def update_reference_gradients(X, y, gradients, theta_reference, lamda, r, batch_params, base_batch_size):\n",
    "    n = X.shape[0]\n",
    "    K, p = theta_reference.shape\n",
    "    for l in range(r, K):\n",
    "        indexes = np.arange(n)\n",
    "        np.random.shuffle(indexes)\n",
    "        if l == 0:\n",
    "            batch_indexes = indexes[0:base_batch_size]\n",
    "            gradients[l] = full_grad_loss(X[batch_indexes], y[batch_indexes], theta_reference[l], lamda)\n",
    "        else:\n",
    "            batch_indexes = indexes[0:batch_params[l-1]]\n",
    "            gradients[l] = full_grad_loss(X[batch_indexes], y[batch_indexes], theta_reference[l], lamda) \\\n",
    "                            - full_grad_loss(X[batch_indexes], y[batch_indexes], theta_reference[l-1], lamda)\n",
    "                \n",
    "    return gradients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "hMwwT_7r5Tb6"
   },
   "outputs": [],
   "source": [
    "def one_epoch_SNVRG(X, y, theta, lamda, loop_params, batch_params, base_batch_size, step_size):\n",
    "    assert len(loop_params) == len(batch_params), \"The number of loop parameters should be the same as that of batch parameters!\"\n",
    "    K = len(loop_params)\n",
    "    total_params = np.prod(loop_params)\n",
    "    n, p = X.shape\n",
    "    theta_reference = np.broadcast_to(theta, shape=(K+1, p))\n",
    "    theta_history = []\n",
    "    \n",
    "    gradients = np.zeros((K+1, p))\n",
    "    indexes = np.arange(n)\n",
    "    np.random.shuffle(indexes)\n",
    "    base_batch = indexes[0:base_batch_size]\n",
    "    gradients[0] = full_grad_loss(X[base_batch], y[base_batch], theta, lamda)\n",
    "    grad = np.sum(gradients, axis=0)\n",
    "    theta = theta - 0.1 / step_size * grad\n",
    "    theta_history.append(theta)\n",
    "    \n",
    "    for t in range(1, total_params):\n",
    "        r = find_index(t, loop_params)\n",
    "        theta_reference = update_reference_points(theta_reference, theta, r)\n",
    "        gradients = update_reference_gradients(X, y, gradients, theta_reference, lamda, r, batch_params, base_batch_size)\n",
    "        grad = np.sum(gradients, axis=0)\n",
    "        theta = theta - 0.1 / step_size * grad\n",
    "        \n",
    "        theta_history.append(theta)\n",
    "        \n",
    "    final_theta = theta_history[np.random.choice(len(theta_history), size=1)[0]]\n",
    "#     final_theta = np.mean(theta_history, axis=0)\n",
    "    final_loss = LASSO_loss(X, y, final_theta, lamda)\n",
    "    \n",
    "    return final_theta, theta_history[-1], final_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ngR-ew5B5Tb-"
   },
   "outputs": [],
   "source": [
    "def SNVRG(X, y, theta, lamda, max_iter, loop_params, batch_params, base_batch_size, step_size):\n",
    "    theta_history = []\n",
    "    loss_history = []\n",
    "    for t in range(max_iter):\n",
    "        theta_hat, theta, loss = one_epoch_SNVRG(X, y, theta, lamda, loop_params, batch_params, base_batch_size, step_size)\n",
    "        theta_history.append(theta_hat)\n",
    "        loss_history.append(loss)\n",
    "    \n",
    "    theta_hat = theta_history[np.random.choice(len(theta_history), size=1)[0]]\n",
    "    return theta_hat, theta_history, loss_history"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "9KEI_HqX5TcB"
   },
   "source": [
    "First, we set the same parameters as those in SVRG to see if we can reproduce the result in SVRG."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "OPPBJs905TcE"
   },
   "outputs": [],
   "source": [
    "theta = np.random.randn(p)\n",
    "loop_params = [100]\n",
    "base_batch_size = 1000\n",
    "batch_params = [1]\n",
    "L = np.linalg.norm((1./(4*n))*X.T.dot(X), ord=2)\n",
    "step_size = 2.0\n",
    "snvrg_theta_hat, snvrg_theta_hat_history, snvrg_loss_history = SNVRG(X, y, theta, 0.1, 100, loop_params, batch_params, base_batch_size, step_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Qa_avq5S5TcH"
   },
   "outputs": [],
   "source": [
    "snvrg_min_loss = np.min(snvrg_loss_history)\n",
    "min_loss = np.min([svrg_min_loss, snvrg_min_loss])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 415
    },
    "colab_type": "code",
    "id": "rBpQq8BZ5TcJ",
    "outputId": "338e8e39-3ab3-42c5-cfa8-94642baa7276"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1224x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let us now plot the convergence in terms of values of loss\n",
    "plt.figure(figsize=(17, 6))\n",
    "plt.semilogy(snvrg_loss_history - min_loss, label='SNVRG', lw=7)\n",
    "plt.semilogy(svrg_loss_history - min_loss, label='SVRG', lw=7)\n",
    "plt.grid(ls=':')\n",
    "plt.legend(loc='best', fontsize=25)\n",
    "plt.xticks(fontsize=20)\n",
    "plt.yticks(fontsize=20)\n",
    "plt.xlabel('Number of Iterations', fontsize=25)\n",
    "plt.ylabel('Approximation Error', fontsize=25)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "XRpcW0SA5TcO"
   },
   "source": [
    "We can see that the convergences of two algorithms are quite similar. Notice that SNVRG is more oscillating than SVRG which is because SNVRG chooses the parameter $\\theta$ randomly in each epoch rather than taking the mean as in SVRG."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "MPWRAtJa5TcO"
   },
   "source": [
    "Now we test the performance of the real SNVRG by taking $K = 2$ as in the paper. And we choose the loop parameters $T_l = \\{2, 2\\}$, the batch parameters $B_l = \\{128, 64\\}$, the base batch size $B = 256$ and the step size parameter $M = 6L$ where $L$ is the Lipschitz constant, as suggested in the paper."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "iy9S5Cry5TcP"
   },
   "outputs": [],
   "source": [
    "theta = np.random.randn(p)\n",
    "loop_params = [2, 2]\n",
    "base_batch_size = 256\n",
    "batch_params = [128, 64]\n",
    "L = np.linalg.norm((1./(4*n))*X.T.dot(X), ord=2)\n",
    "step_size = 6 * L\n",
    "snvrg_theta_hat, snvrg_theta_hat_history, snvrg_loss_history = SNVRG(X, y, theta, 0.1, 100, loop_params, batch_params, base_batch_size, step_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "1vkRKAYR5TcR"
   },
   "outputs": [],
   "source": [
    "snvrg_min_loss = np.min(snvrg_loss_history)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "1zTlwJFU5TcT"
   },
   "outputs": [],
   "source": [
    "min_loss = np.min([svrg_min_loss, snvrg_min_loss])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 415
    },
    "colab_type": "code",
    "id": "lV34A5mX5TcV",
    "outputId": "c5fbb255-4e2d-49ad-f8ad-b3121a224b6e"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1224x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let us now plot the convergence in terms of values of loss\n",
    "plt.figure(figsize=(17, 6))\n",
    "plt.semilogy(snvrg_loss_history - min_loss, label='SNVRG', lw=7)\n",
    "plt.semilogy(svrg_loss_history - min_loss, label='SVRG', lw=7)\n",
    "plt.grid(ls=':')\n",
    "plt.legend(loc='best', fontsize=25)\n",
    "plt.xticks(fontsize=20)\n",
    "plt.yticks(fontsize=20)\n",
    "plt.xlabel('Number of Iterations', fontsize=25)\n",
    "plt.ylabel('Approximation Error', fontsize=25)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "1O0qnqHx5TcZ"
   },
   "source": [
    "We can see that the SNVRG converges slower at the beginning but it can attain similar performance as SVRG after around 50 iterations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "NHOgiBvU5Tcb"
   },
   "source": [
    "## 2. Non-convex Problem: MNIST dataset image classification\n",
    "As presented in the paper, we take the image classification non-convex problem on MNIST dataset to see the performance of SNVRG.\n",
    "\n",
    "In order to train the neural network efficiently, we use TensorFlow framework. Thus we reimplement the SNVRG algorithm in TensorFlow here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "waqsbJLc5Tcc"
   },
   "outputs": [],
   "source": [
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "PysXumbg5Tcf"
   },
   "outputs": [],
   "source": [
    "# Image size in MNIST dataset is (28, 28), so the first convolutional layer is applied with SAME padding, to fit with the LeNet architecture\n",
    "def CNN_LeNet(images, parameters):\n",
    "    filter1, bias1, filter2, bias2, W1, b1, W2, b2, W3, b3 = parameters\n",
    "    stride1 = [1, 1, 1, 1]\n",
    "    kernel = [1, 2, 2, 1]\n",
    "    stride2 = [1, 2, 2, 1]\n",
    "    conv1 = tf.nn.conv2d(images, filter1, stride1, padding='SAME', name='Conv1') + bias1\n",
    "    pool1 = tf.nn.max_pool(conv1, kernel, stride2, padding='VALID', name='MaxPool1')\n",
    "    relu1 = tf.nn.relu(pool1, name='ReLU1')\n",
    "    conv2 = tf.nn.conv2d(relu1, filter2, stride1, padding='VALID', name='Conv2') + bias2\n",
    "    pool2 = tf.nn.max_pool(conv2, kernel, stride2, padding='VALID', name='MaxPool2')\n",
    "    relu2 = tf.nn.relu(pool2, name='Relu2')\n",
    "    size = relu2.get_shape().as_list()\n",
    "    new_size = size[-1] * size[-2] * size[-3]\n",
    "    flatten = tf.reshape(relu2, [-1, new_size])\n",
    "    fc1 = tf.nn.relu(tf.matmul(flatten, W1) + b1, name='FC1')\n",
    "    fc2 = tf.nn.relu(tf.matmul(fc1, W2) + b2, name='FC2')\n",
    "    output = tf.nn.softmax(tf.matmul(fc2, W3) + b3, name='Output')\n",
    "    \n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "nyF34bzU5Tck"
   },
   "outputs": [],
   "source": [
    "def loss(y, pred, regularization, parameters):\n",
    "    filter1, bias1, filter2, bias2, W1, b1, W2, b2, W3, b3 = parameters\n",
    "    cost = tf.reduce_mean(-tf.reduce_sum(y * tf.log(pred), axis=-1))\n",
    "    cost = cost + regularization * (tf.reduce_sum(tf.square(filter1)) + tf.reduce_sum(tf.square(filter2)))\n",
    "    cost = cost + regularization * (tf.reduce_sum(tf.square(W1)) + tf.reduce_sum(tf.square(W2)) + tf.reduce_sum(tf.square(W3)))\n",
    "    return cost\n",
    "\n",
    "def grad_loss(cost, parameters):\n",
    "    d_filter1, d_bias1, d_filter2, d_bias2, d_W1, d_b1, d_W2, d_b2, d_W3, d_b3 = tf.gradients(cost, parameters)\n",
    "    return [d_filter1, d_bias1, d_filter2, d_bias2, d_W1, d_b1, d_W2, d_b2, d_W3, d_b3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "uGs0XpO65Tcn"
   },
   "outputs": [],
   "source": [
    "def one_epoch_SVRG_tf(X, y, parameters, regularization, max_iter_inner, step_size):\n",
    "    n = X.get_shape().as_list()[0]\n",
    "    parameters_history = []\n",
    "    \n",
    "    parameters_hat = parameters\n",
    "    \n",
    "    y_pred = CNN_LeNet(X, parameters)\n",
    "    cost = loss(y, y_pred, regularization, parameters)\n",
    "    full_gradient = grad_loss(cost, parameters_hat)\n",
    "    \n",
    "    for k in range(max_iter_inner):\n",
    "        i = np.random.randint(0, n)\n",
    "        y_pred_new = CNN_LeNet(X[i:i+1], parameters)\n",
    "        cost_new = loss(y[i:i+1], y_pred_new, regularization, parameters)\n",
    "        grad_new = grad_loss(cost_new, parameters)\n",
    "        y_pred_old = CNN_LeNet(X[i:i+1], parameters_hat)\n",
    "        cost_old = loss(y[i:i+1], y_pred_old, regularization, parameters_hat)\n",
    "        grad_old = grad_loss(cost_old, parameters_hat)\n",
    "        \n",
    "        for j, _ in enumerate(parameters):\n",
    "            parameters[j] = parameters[j] - step_size * (grad_new[j] - grad_old[j] + full_gradient[j])\n",
    "        \n",
    "        parameters_history.append(parameters)\n",
    "\n",
    "    parameters_hat = []\n",
    "    for j in range(len(parameters)):\n",
    "        param_hat = parameters_history[0][j]\n",
    "        for k in range(1, max_iter_inner):\n",
    "            param_hat = param_hat + parameters_history[k][j]\n",
    "        param_hat = param_hat / max_iter_inner\n",
    "        parameters_hat.append(param_hat)\n",
    "\n",
    "    y_pred = CNN_LeNet(X, parameters_hat)\n",
    "    cost = loss(y, y_pred, regularization, parameters_hat)\n",
    "    \n",
    "    return parameters_hat, cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "r0FK5IVI5Tcs"
   },
   "outputs": [],
   "source": [
    "def update_reference_points_tf(parameters_references, parameters, r):\n",
    "    K = len(parameters_references)\n",
    "    for i in range(r, K):\n",
    "        parameters_references[i] = parameters\n",
    "    return parameters_references\n",
    "    \n",
    "def update_reference_gradients_tf(X, y, gradients, parameters_references, regularization, r, batch_params, base_batch_size):\n",
    "    n = X.get_shape().as_list()[0]\n",
    "    K = len(parameters_references)\n",
    "    for l in range(r, K):\n",
    "        indexes = tf.random.shuffle(tf.range(n))\n",
    "        if l == 0:\n",
    "            batch_indexes = indexes[0:base_batch_size]\n",
    "            y_pred = CNN_LeNet(tf.gather(X, batch_indexes), parameters_references[l])\n",
    "            cost = loss(tf.gather(y, batch_indexes), y_pred, regularization, parameters_references[l])\n",
    "            gradients[l] = grad_loss(cost, parameters_references[l])\n",
    "        else:\n",
    "            batch_indexes = indexes[0:batch_params[l-1]]\n",
    "            y_pred_new = CNN_LeNet(tf.gather(X, batch_indexes), parameters_references[l])\n",
    "            cost_new = loss(tf.gather(y, batch_indexes), y_pred_new, regularization, parameters_references[l])\n",
    "            grad_new = grad_loss(cost_new, parameters_references[l])\n",
    "            y_pred_old = CNN_LeNet(tf.gather(X, batch_indexes), parameters_references[l-1])\n",
    "            cost_old = loss(tf.gather(y, batch_indexes), y_pred_old, regularization, parameters_references[l-1])\n",
    "            grad_old = grad_loss(cost_old, parameters_references[l-1])\n",
    "            for i in range(len(grad_new)):\n",
    "                gradients[l][i] = grad_new[i] - grad_old[i]\n",
    "            \n",
    "    return gradients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "Mkxzb6yh5Tcv"
   },
   "outputs": [],
   "source": [
    "def one_epoch_SNVRG_tf(X, y, parameters, regularization, loop_params, batch_params, base_batch_size, step_size):\n",
    "    K = len(loop_params)\n",
    "    total_params = np.prod(loop_params)\n",
    "    n = X.get_shape().as_list()[0]\n",
    "    parameters_history = []\n",
    "    \n",
    "    parameters_references = []\n",
    "    gradients = []\n",
    "    for _ in range(K+1):\n",
    "        param_references = []\n",
    "        grad_references = []\n",
    "        for param in parameters:\n",
    "            param_references.append(param)\n",
    "            grad_references.append(tf.zeros_like(param))\n",
    "        parameters_references.append(param_references)\n",
    "        gradients.append(grad_references)\n",
    "        \n",
    "    indexes = tf.random.shuffle(tf.range(n))\n",
    "    base_batch = indexes[0:base_batch_size]\n",
    "    y_pred = CNN_LeNet(tf.gather(X, base_batch), parameters)\n",
    "    cost = loss(tf.gather(y, base_batch), y_pred, regularization, parameters)\n",
    "    gradients[0] = grad_loss(cost, parameters)\n",
    "    grads = gradients[0]\n",
    "    for i in range(len(parameters)):\n",
    "        for j in range(1, K+1):\n",
    "            grads[i] = grads[i] + gradients[j][i]\n",
    "            \n",
    "        parameters[i] = parameters[i] - 0.1 / step_size * grads[i]\n",
    "    \n",
    "    parameters_history.append(parameters)\n",
    "    \n",
    "    for t in range(1, total_params):\n",
    "        r = find_index(t, loop_params)\n",
    "        parameters_references = update_reference_points_tf(parameters_references, parameters, r)\n",
    "        gradients = update_reference_gradients_tf(X, y, gradients, parameters_references, regularization, r, batch_params, base_batch_size)\n",
    "        \n",
    "        grads = gradients[0]\n",
    "        for i in range(len(parameters)):\n",
    "            for j in range(1, K+1):\n",
    "                grads[i] = grads[i] + gradients[j][i]\n",
    "\n",
    "            parameters[i] = parameters[i] - 0.1 / step_size * grads[i]\n",
    "        parameters_history.append(parameters)\n",
    "        \n",
    "    final_parameters = parameters_history[np.random.choice(len(parameters_history), 1)[0]]\n",
    "    y_pred = CNN_LeNet(X, final_parameters)\n",
    "    final_loss = loss(y, y_pred, regularization, final_parameters)\n",
    "    \n",
    "    return final_parameters, parameters_history[-1], final_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mI8OfI-V5Tcy"
   },
   "outputs": [],
   "source": [
    "def evaluate(X, y, parameters):\n",
    "    y_pred = CNN_LeNet(X, parameters)\n",
    "    preds = tf.argmax(y_pred, axis=1)\n",
    "    err = 1. - tf.reduce_sum(tf.cast(tf.equal(y, preds), tf.float32)) / y.get_shape().as_list()[0]\n",
    "    return err"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 68
    },
    "colab_type": "code",
    "id": "XhE_ydKG5Tc4",
    "outputId": "79eaa7f5-2ce6-43ce-dd49-135f305e83a4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(60000, 28, 28, 1)\n",
      "(60000, 10)\n",
      "(10000,)\n"
     ]
    }
   ],
   "source": [
    "# load MNIST dataset\n",
    "mnist = tf.keras.datasets.mnist\n",
    "\n",
    "(x_train, y_train),(x_test, y_test) = mnist.load_data()\n",
    "x_train, x_test = x_train / 255.0, x_test / 255.0\n",
    "x_train, x_test = x_train[:, :, :, np.newaxis], x_test[:, :, :, np.newaxis]\n",
    "\n",
    "y_tr = np.zeros((y_train.shape[0], 10))\n",
    "y_tr[np.arange(y_train.shape[0]), y_train] = 1\n",
    "y_te = y_test\n",
    "\n",
    "print(x_train.shape)\n",
    "print(y_tr.shape)\n",
    "print(y_te.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "xw_KdxPM5Tc8"
   },
   "source": [
    "### Adam Optimizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 819
    },
    "colab_type": "code",
    "id": "-SnZgHlw5Tc9",
    "outputId": "dfb1c0b8-8a71-4420-896c-cdf999071075"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-26-1ff09ae2f44e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     48\u001b[0m             \u001b[0mx_batch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindexes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbatch\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m             \u001b[0my_batch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_tr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindexes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbatch\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m             \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcost\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx_batch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0my_batch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr_ph\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m \u001b[0;31m#             print(\"Batch: {}\\t Loss: {}\".format(batch, c))\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Applications/anaconda/lib/python3.5/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    927\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    928\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[0;32m--> 929\u001b[0;31m                          run_metadata_ptr)\n\u001b[0m\u001b[1;32m    930\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    931\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Applications/anaconda/lib/python3.5/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1150\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfinal_fetches\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfinal_targets\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mfeed_dict_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1151\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\n\u001b[0;32m-> 1152\u001b[0;31m                              feed_dict_tensor, options, run_metadata)\n\u001b[0m\u001b[1;32m   1153\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1154\u001b[0m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Applications/anaconda/lib/python3.5/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_run\u001b[0;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1326\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1327\u001b[0m       return self._do_call(_run_fn, feeds, fetches, targets, options,\n\u001b[0;32m-> 1328\u001b[0;31m                            run_metadata)\n\u001b[0m\u001b[1;32m   1329\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1330\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_prun_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeeds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Applications/anaconda/lib/python3.5/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1332\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1333\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1334\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1335\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOpError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1336\u001b[0m       \u001b[0mmessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Applications/anaconda/lib/python3.5/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run_fn\u001b[0;34m(feed_dict, fetch_list, target_list, options, run_metadata)\u001b[0m\n\u001b[1;32m   1317\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_extend_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1318\u001b[0m       return self._call_tf_sessionrun(\n\u001b[0;32m-> 1319\u001b[0;31m           options, feed_dict, fetch_list, target_list, run_metadata)\n\u001b[0m\u001b[1;32m   1320\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1321\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_prun_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Applications/anaconda/lib/python3.5/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_call_tf_sessionrun\u001b[0;34m(self, options, feed_dict, fetch_list, target_list, run_metadata)\u001b[0m\n\u001b[1;32m   1405\u001b[0m     return tf_session.TF_SessionRun_wrapper(\n\u001b[1;32m   1406\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_session\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_list\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1407\u001b[0;31m         run_metadata)\n\u001b[0m\u001b[1;32m   1408\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1409\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_tf_sessionprun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "filter1 = tf.get_variable(name='filter1', shape=(5, 5, 1, 6), initializer=tf.glorot_uniform_initializer())\n",
    "bias1 = tf.get_variable(name='bias1', initializer=tf.zeros((6)))\n",
    "filter2 = tf.get_variable(name='filter2', shape=(5, 5, 6, 16), initializer=tf.glorot_uniform_initializer())\n",
    "bias2 = tf.get_variable(name='bias2', initializer=tf.zeros((16)))\n",
    "W1 = tf.get_variable(name='W1', shape=(400, 120), initializer=tf.glorot_uniform_initializer())\n",
    "b1 = tf.get_variable(name='b1', initializer=tf.zeros((120)))\n",
    "W2 = tf.get_variable(name='W2', shape=(120, 84), initializer=tf.glorot_uniform_initializer())\n",
    "b2 = tf.get_variable(name='b2', initializer=tf.zeros(84))\n",
    "W3 = tf.get_variable(name='W3', shape=(84, 10), initializer=tf.glorot_uniform_initializer())\n",
    "b3 = tf.get_variable(name='b3', initializer=tf.zeros(10))\n",
    "\n",
    "parameters = [filter1, bias1, filter2, bias2, W1, b1, W2, b2, W3, b3]\n",
    "regularization = 0.0\n",
    "lr = 0.01\n",
    "epochs = 20\n",
    "batch_size = 256\n",
    "num_mini_batches = x_train.shape[0] // 256\n",
    "\n",
    "X = tf.placeholder(dtype='float32', shape=(None, 28, 28, 1))\n",
    "y = tf.placeholder(dtype='float32', shape=(None, 10))\n",
    "lr_ph = tf.placeholder(dtype='float32', shape=())\n",
    "\n",
    "X_test = tf.placeholder(dtype='float32', shape=(10000, 28, 28, 1))\n",
    "y_test = tf.placeholder(dtype='int64', shape=(10000, ))\n",
    "\n",
    "y_pred = CNN_LeNet(X, parameters)\n",
    "cost = loss(y, y_pred, regularization, parameters)\n",
    "\n",
    "opt = tf.train.AdamOptimizer(learning_rate=lr_ph)\n",
    "optimizer = opt.minimize(cost)\n",
    "\n",
    "init = tf.global_variables_initializer()\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(init)\n",
    "#     parameters_history = []\n",
    "    adam_loss_history = []\n",
    "    adam_test_error_history = []\n",
    "    for epoch in range(epochs):\n",
    "        if epoch % 10 == 0:\n",
    "            lr *= 0.1\n",
    "        print(\"Epoch {}/{}\".format(epoch+1, epochs))\n",
    "        indexes = np.arange(x_train.shape[0])\n",
    "        np.random.shuffle(indexes)\n",
    "        for batch in range(num_mini_batches - 1):\n",
    "            x_batch = x_train[indexes[batch * batch_size: (batch+1) * batch_size]]\n",
    "            y_batch = y_tr[indexes[batch * batch_size: (batch+1) * batch_size]]\n",
    "            _, c = sess.run([optimizer, cost], feed_dict={X: x_batch, y: y_batch, lr_ph: lr})\n",
    "#             print(\"Batch: {}\\t Loss: {}\".format(batch, c))\n",
    "            \n",
    "        x_batch = x_train[indexes[(batch+1) * batch_size:]]\n",
    "        y_batch = y_tr[indexes[(batch+1) * batch_size:]]\n",
    "        _, c = sess.run([optimizer, cost], feed_dict={X: x_batch, y: y_batch, lr_ph: lr})\n",
    "#         print(\"Batch: {}\\t Loss: {}\".format(batch+1, c))\n",
    "        \n",
    "        test_error = evaluate(X_test, y_test, parameters)\n",
    "        err = sess.run(test_error, feed_dict={X_test: x_test, y_test: y_te})\n",
    "        \n",
    "        adam_loss_history.append(c)\n",
    "        adam_test_error_history.append(err)\n",
    "        print(\"\\tLoss: {}\\tTest Error: {}\".format(c, err))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "TRyYfovM5TdC"
   },
   "source": [
    "### SVRG Optimizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1680
    },
    "colab_type": "code",
    "id": "b_5bdmb45TdD",
    "outputId": "6ae8136b-3c8a-4fca-dbd8-201d073f51ae"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "Batch: 0\t Loss: 2.3166403770446777\n",
      "Batch: 1\t Loss: 2.3234994411468506\n",
      "Batch: 2\t Loss: 2.3162574768066406\n",
      "Batch: 3\t Loss: 2.3295300006866455\n",
      "Batch: 4\t Loss: 2.3226959705352783\n",
      "Batch: 5\t Loss: 2.3185739517211914\n",
      "Batch: 6\t Loss: 2.3135275840759277\n",
      "Batch: 7\t Loss: 2.310361385345459\n",
      "Batch: 8\t Loss: 2.300560712814331\n",
      "Batch: 9\t Loss: 2.2969512939453125\n",
      "Batch: 10\t Loss: 2.3140320777893066\n",
      "Batch: 11\t Loss: 2.306520462036133\n",
      "Batch: 12\t Loss: 2.315434217453003\n",
      "Batch: 13\t Loss: 2.31846284866333\n",
      "Batch: 14\t Loss: 2.298520803451538\n",
      "Batch: 15\t Loss: 2.300766944885254\n",
      "Batch: 16\t Loss: 2.300045967102051\n",
      "Batch: 17\t Loss: 2.2987613677978516\n",
      "Batch: 18\t Loss: 2.2928411960601807\n",
      "Batch: 19\t Loss: 2.3043787479400635\n",
      "Batch: 20\t Loss: 2.298440456390381\n",
      "Batch: 21\t Loss: 2.3059768676757812\n",
      "Batch: 22\t Loss: 2.294304609298706\n",
      "Batch: 23\t Loss: 2.3008201122283936\n",
      "Batch: 24\t Loss: 2.2963995933532715\n",
      "Batch: 25\t Loss: 2.29807710647583\n",
      "Batch: 26\t Loss: 2.2792723178863525\n",
      "Batch: 27\t Loss: 2.2910618782043457\n",
      "Batch: 28\t Loss: 2.2867095470428467\n",
      "Batch: 29\t Loss: 2.2934212684631348\n",
      "Batch: 30\t Loss: 2.283079147338867\n",
      "Batch: 31\t Loss: 2.3001885414123535\n",
      "Batch: 32\t Loss: 2.303978681564331\n",
      "Batch: 33\t Loss: 2.273430824279785\n",
      "Batch: 34\t Loss: 2.2845726013183594\n",
      "Batch: 35\t Loss: 2.287029504776001\n",
      "Batch: 36\t Loss: 2.2848827838897705\n",
      "Batch: 37\t Loss: 2.290069580078125\n",
      "Batch: 38\t Loss: 2.2919387817382812\n",
      "Batch: 39\t Loss: 2.288644790649414\n",
      "Batch: 40\t Loss: 2.295280933380127\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "ignored",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-28-863c46c8e09d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     47\u001b[0m             \u001b[0my_batch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_tr\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindexes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbatch\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m             \u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mone_epoch_SVRG_tf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mregularization\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_iter_inner\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep_size\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 49\u001b[0;31m             \u001b[0mparam\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcost\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx_batch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0my_batch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep_size\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     50\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Batch: {}\\t Loss: {}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcost\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    927\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    928\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[0;32m--> 929\u001b[0;31m                          run_metadata_ptr)\n\u001b[0m\u001b[1;32m    930\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    931\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1150\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfinal_fetches\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfinal_targets\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mfeed_dict_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1151\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\n\u001b[0;32m-> 1152\u001b[0;31m                              feed_dict_tensor, options, run_metadata)\n\u001b[0m\u001b[1;32m   1153\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1154\u001b[0m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_run\u001b[0;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1326\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1327\u001b[0m       return self._do_call(_run_fn, feeds, fetches, targets, options,\n\u001b[0;32m-> 1328\u001b[0;31m                            run_metadata)\n\u001b[0m\u001b[1;32m   1329\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1330\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_prun_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeeds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1332\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1333\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1334\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1335\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOpError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1336\u001b[0m       \u001b[0mmessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run_fn\u001b[0;34m(feed_dict, fetch_list, target_list, options, run_metadata)\u001b[0m\n\u001b[1;32m   1317\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_extend_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1318\u001b[0m       return self._call_tf_sessionrun(\n\u001b[0;32m-> 1319\u001b[0;31m           options, feed_dict, fetch_list, target_list, run_metadata)\n\u001b[0m\u001b[1;32m   1320\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1321\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_prun_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_call_tf_sessionrun\u001b[0;34m(self, options, feed_dict, fetch_list, target_list, run_metadata)\u001b[0m\n\u001b[1;32m   1405\u001b[0m     return tf_session.TF_SessionRun_wrapper(\n\u001b[1;32m   1406\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_session\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_list\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1407\u001b[0;31m         run_metadata)\n\u001b[0m\u001b[1;32m   1408\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1409\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_tf_sessionprun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "filter1 = tf.get_variable(name='filter1', shape=(5, 5, 1, 6), initializer=tf.glorot_uniform_initializer())\n",
    "bias1 = tf.get_variable(name='bias1', initializer=tf.zeros((6)))\n",
    "filter2 = tf.get_variable(name='filter2', shape=(5, 5, 6, 16), initializer=tf.glorot_uniform_initializer())\n",
    "bias2 = tf.get_variable(name='bias2', initializer=tf.zeros((16)))\n",
    "W1 = tf.get_variable(name='W1', shape=(400, 120), initializer=tf.glorot_uniform_initializer())\n",
    "b1 = tf.get_variable(name='b1', initializer=tf.zeros((120)))\n",
    "W2 = tf.get_variable(name='W2', shape=(120, 84), initializer=tf.glorot_uniform_initializer())\n",
    "b2 = tf.get_variable(name='b2', initializer=tf.zeros(84))\n",
    "W3 = tf.get_variable(name='W3', shape=(84, 10), initializer=tf.glorot_uniform_initializer())\n",
    "b3 = tf.get_variable(name='b3', initializer=tf.zeros(10))\n",
    "\n",
    "parameters = [filter1, bias1, filter2, bias2, W1, b1, W2, b2, W3, b3]\n",
    "regularization = 0.0\n",
    "max_iter_inner = 4\n",
    "lr = 0.01\n",
    "epochs = 20\n",
    "batch_size = 256\n",
    "num_mini_batches = x_train.shape[0] // 256\n",
    "\n",
    "X = tf.placeholder(dtype='float32', shape=(batch_size, 28, 28, 1))\n",
    "y = tf.placeholder(dtype='float32', shape=(batch_size, 10))\n",
    "step_size = tf.placeholder(dtype='float32', shape=())\n",
    "\n",
    "X_test = tf.placeholder(dtype='float32', shape=(10000, 28, 28, 1))\n",
    "y_test = tf.placeholder(dtype='int64', shape=(10000, ))\n",
    "\n",
    "y_pred = CNN_LeNet(X, parameters)\n",
    "cost = loss(y, y_pred, regularization, parameters)\n",
    "\n",
    "init = tf.global_variables_initializer()\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(init)\n",
    "#     parameters_history = []\n",
    "    svrg_loss_history = []\n",
    "    svrg_test_error_history = []\n",
    "    for epoch in range(epochs):\n",
    "        if epoch % 10 == 0:\n",
    "            lr *= 0.1\n",
    "        print(\"Epoch {}/{}\".format(epoch+1, epochs))\n",
    "        indexes = np.arange(x_train.shape[0])\n",
    "        np.random.shuffle(indexes)\n",
    "        for batch in range(num_mini_batches - 1):\n",
    "            x_batch = x_train[indexes[batch * batch_size: (batch+1) * batch_size]]\n",
    "            y_batch = y_tr[indexes[batch * batch_size: (batch+1) * batch_size]]\n",
    "            parameters, c = one_epoch_SVRG_tf(X, y, parameters, regularization, max_iter_inner, step_size)\n",
    "            param, cost = sess.run([parameters, c], feed_dict={X: x_batch, y: y_batch, step_size: lr})\n",
    "            print(\"Batch: {}\\t Loss: {}\".format(batch, cost))\n",
    "        \n",
    "#         parameters_history.append(param_hat)\n",
    "        test_error = evaluate(X_test, y_test, parameters)\n",
    "        err = sess.run(test_error, feed_dict={X_test: x_test, y_test: y_te})\n",
    "        \n",
    "        svrg_loss_history.append(cost)\n",
    "        svrg_test_error_history.append(err)\n",
    "        print(\"\\tLoss: {}\".format(cost))\n",
    "        print(\"\\tTest Error: {}\".format(err))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 612
    },
    "colab_type": "code",
    "id": "LxkjtR835TdH",
    "outputId": "0dd6f267-4ac4-4f30-8be8-373b2a4b7217"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "Batch: 0\t Loss: 2.305967092514038\n",
      "Batch: 1\t Loss: 2.3005032539367676\n",
      "Batch: 2\t Loss: 2.29042387008667\n",
      "Batch: 3\t Loss: 2.29354190826416\n",
      "Batch: 4\t Loss: 2.2948389053344727\n",
      "Batch: 5\t Loss: 2.283888816833496\n",
      "Batch: 6\t Loss: 2.287527084350586\n",
      "Batch: 7\t Loss: 2.2951488494873047\n",
      "Batch: 8\t Loss: 2.2911171913146973\n",
      "Batch: 9\t Loss: 2.280576229095459\n",
      "Batch: 10\t Loss: 2.2785964012145996\n",
      "Batch: 11\t Loss: 2.2865195274353027\n",
      "Batch: 12\t Loss: 2.2801005840301514\n",
      "Batch: 13\t Loss: 2.27742338180542\n",
      "Batch: 14\t Loss: 2.2770328521728516\n",
      "Batch: 15\t Loss: 2.2738842964172363\n",
      "Batch: 16\t Loss: 2.2809810638427734\n",
      "Batch: 17\t Loss: 2.264688491821289\n",
      "Batch: 18\t Loss: 2.2599034309387207\n",
      "Batch: 19\t Loss: 2.272967576980591\n",
      "Batch: 20\t Loss: 2.260420799255371\n",
      "Batch: 21\t Loss: 2.2602486610412598\n",
      "Batch: 22\t Loss: 2.256068706512451\n",
      "Batch: 23\t Loss: 2.261824607849121\n",
      "Batch: 24\t Loss: 2.2711706161499023\n",
      "Batch: 25\t Loss: 2.270940065383911\n",
      "Batch: 26\t Loss: 2.25740909576416\n",
      "Batch: 27\t Loss: 2.242457389831543\n",
      "Batch: 28\t Loss: 2.242673397064209\n",
      "Batch: 29\t Loss: 2.203181266784668\n",
      "Batch: 30\t Loss: 2.2301080226898193\n",
      "Batch: 31\t Loss: 2.2527055740356445\n",
      "Batch: 32\t Loss: 2.2538561820983887\n",
      "Batch: 33\t Loss: 2.250520944595337\n",
      "Batch: 34\t Loss: 2.237422466278076\n",
      "Batch: 35\t Loss: 2.23191237449646\n",
      "Batch: 36\t Loss: 2.252544403076172\n",
      "Batch: 37\t Loss: 2.2259905338287354\n",
      "Batch: 38\t Loss: 2.20107364654541\n",
      "Batch: 39\t Loss: 2.235032558441162\n",
      "Batch: 40\t Loss: 2.222411632537842\n",
      "Batch: 41\t Loss: 2.2265114784240723\n",
      "Batch: 42\t Loss: 2.239570140838623\n",
      "Batch: 43\t Loss: 2.230170726776123\n",
      "Batch: 44\t Loss: 2.2334799766540527\n",
      "Batch: 45\t Loss: 2.174612045288086\n",
      "Batch: 46\t Loss: 2.203150749206543\n",
      "Batch: 47\t Loss: 2.1849093437194824\n",
      "Batch: 48\t Loss: 2.193286895751953\n",
      "Batch: 49\t Loss: 2.2276182174682617\n",
      "Batch: 50\t Loss: 2.1942639350891113\n",
      "Batch: 51\t Loss: 2.195021152496338\n",
      "Batch: 52\t Loss: 2.20029354095459\n",
      "Batch: 53\t Loss: 2.1989243030548096\n",
      "Batch: 54\t Loss: 2.1787283420562744\n",
      "Batch: 55\t Loss: 2.1655325889587402\n",
      "Batch: 56\t Loss: 2.1804039478302\n",
      "Batch: 57\t Loss: 2.1771602630615234\n",
      "Batch: 58\t Loss: 2.1453256607055664\n",
      "Batch: 59\t Loss: 2.1437292098999023\n",
      "Batch: 60\t Loss: 2.1233935356140137\n",
      "Batch: 61\t Loss: 2.1400346755981445\n",
      "Batch: 62\t Loss: 2.1310315132141113\n",
      "Batch: 63\t Loss: 2.059663772583008\n",
      "Batch: 64\t Loss: 2.154019832611084\n",
      "Batch: 65\t Loss: 2.1796345710754395\n",
      "Batch: 66\t Loss: 2.182682514190674\n",
      "Batch: 67\t Loss: 2.1167373657226562\n",
      "Batch: 68\t Loss: 2.124927520751953\n",
      "Batch: 69\t Loss: 2.1304736137390137\n",
      "Batch: 70\t Loss: 2.064681053161621\n",
      "Batch: 71\t Loss: 2.023226737976074\n",
      "Batch: 72\t Loss: 2.154240846633911\n",
      "Batch: 73\t Loss: 2.084331512451172\n",
      "Batch: 74\t Loss: 2.0710339546203613\n",
      "Batch: 75\t Loss: 2.041762351989746\n",
      "Batch: 76\t Loss: 2.0700130462646484\n"
     ]
    }
   ],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "filter1 = tf.get_variable(name='filter1', shape=(5, 5, 1, 6), initializer=tf.glorot_uniform_initializer())\n",
    "bias1 = tf.get_variable(name='bias1', initializer=tf.zeros((6)))\n",
    "filter2 = tf.get_variable(name='filter2', shape=(5, 5, 6, 16), initializer=tf.glorot_uniform_initializer())\n",
    "bias2 = tf.get_variable(name='bias2', initializer=tf.zeros((16)))\n",
    "W1 = tf.get_variable(name='W1', shape=(400, 120), initializer=tf.glorot_uniform_initializer())\n",
    "b1 = tf.get_variable(name='b1', initializer=tf.zeros((120)))\n",
    "W2 = tf.get_variable(name='W2', shape=(120, 84), initializer=tf.glorot_uniform_initializer())\n",
    "b2 = tf.get_variable(name='b2', initializer=tf.zeros(84))\n",
    "W3 = tf.get_variable(name='W3', shape=(84, 10), initializer=tf.glorot_uniform_initializer())\n",
    "b3 = tf.get_variable(name='b3', initializer=tf.zeros(10))\n",
    "\n",
    "parameters = [filter1, bias1, filter2, bias2, W1, b1, W2, b2, W3, b3]\n",
    "regularization = 0.0\n",
    "loop_params = [4, 4]\n",
    "base_batch_size = 256\n",
    "batch_params = [64, 16]\n",
    "lr = 10.0\n",
    "epochs = 20\n",
    "batch_size = 256\n",
    "num_mini_batches = x_train.shape[0] // 256\n",
    "\n",
    "X = tf.placeholder(dtype='float32', shape=(batch_size, 28, 28, 1))\n",
    "y = tf.placeholder(dtype='float32', shape=(batch_size, 10))\n",
    "step_size = tf.placeholder(dtype='float32', shape=())\n",
    "\n",
    "X_test = tf.placeholder(dtype='float32', shape=(10000, 28, 28, 1))\n",
    "y_test = tf.placeholder(dtype='int64', shape=(10000, ))\n",
    "\n",
    "init = tf.global_variables_initializer()\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(init)\n",
    "#     parameters_history = []\n",
    "    snvrg_loss_history = []\n",
    "    snvrg_test_error_history = []\n",
    "    for epoch in range(epochs):\n",
    "        if epoch % 10 == 0:\n",
    "            lr *= 10\n",
    "        print(\"Epoch {}/{}\".format(epoch+1, epochs))\n",
    "        indexes = np.arange(x_train.shape[0])\n",
    "        np.random.shuffle(indexes)\n",
    "        for batch in range(num_mini_batches - 1):\n",
    "            x_batch = x_train[indexes[batch * batch_size: (batch+1) * batch_size]]\n",
    "            y_batch = y_tr[indexes[batch * batch_size: (batch+1) * batch_size]]\n",
    "            parameters_hat, parameters, c = one_epoch_SNVRG_tf(X, y, parameters, regularization, loop_params, \n",
    "                                                                  batch_params, base_batch_size, step_size)\n",
    "            param_hat, param, cost = sess.run([parameters_hat, parameters, c], \n",
    "                                                  feed_dict={X: x_batch, y: y_batch, step_size: lr})\n",
    "            print(\"Batch: {}\\t Loss: {}\".format(batch, cost))\n",
    "            \n",
    "\n",
    "        test_error = evaluate(X_test, y_test, parameters)\n",
    "        err = sess.run(test_error, feed_dict={X_test: x_test, y_test: y_te})\n",
    "        \n",
    "        snvrg_loss_history.append(cost)\n",
    "        snvrg_test_error_history.append(err)\n",
    "        print(\"\\tLoss: {}\".format(cost))\n",
    "        print(\"\\tTest Error: {}\".format(err))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "hwVsBCqT5TdM",
    "outputId": "3c15d2e5-f3b6-43a9-9565-7dfff115be77"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.51936007, -1.8262963, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan, nan]\n"
     ]
    }
   ],
   "source": [
    "print(loss_his)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "P7aqmxpv5TdQ"
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "SNVRG.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
